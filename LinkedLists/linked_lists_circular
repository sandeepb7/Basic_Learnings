#!/usr/bin/python
class node :
    def __init__(self, data= None, next = None):
        self.data = data
        self.next = next

    def set_data(self, data):
        self.data = data

    def get_data(self) :
        return self.data

    def get_next(self) :
        return self.Next

    def set_next(self, next) :
        self.Next = next


class Circularlinkedlist :
    def __init__(self):
        self.head = None

    def length(self):
        if self.length == 0:
            print "List is empty"
        current = self.head
        if current == None:
            return 0
        count = 1
        while current != self.head:
            current = current.get_next()
            count += 1
        return count


    def insert_end(self, data):
        newnode = node()
        newnode.set_data(data)
        newnode.set_next(newnode)
        if self.length == 0:
            self.head = newnode
            newnode.set_next(self.head)
        else :
            current = self.head
            newnode.set_next(self.head)
            while current.get_next != self.head:
                current = current.get_next()
                current.set_next(newnode)


    def insert_front(self, data):
        newnode = node()
        newnode.set_data(data)
        newnode.set_next(newnode)
        if self.length == 0:
            self.head = newnode
            newnode.set_next(self.head)
        else :
            temp = self.head
            while temp.get_next != self.head:
                temp = temp.get_next()
            temp.set_next(newnode)
            newnode.set_next(self.head)
            self.head = newnode


    def insert_NthNode(self, data, index):
        newnode = node()
        newnode.set_data(data)
        newnode.set_next(newnode)
        if self.length == 0:
            self.head = newnode
            newnode.set_next(self.head)
        else :
            current = self.head
            previous = None
            counter = 0
            while counter < index :
                previous = current
                current = current.get_next()
                counter += 1

            newnode.set_next(previous.get_next())
            previous.set_next(newnode)


    def delete_end(self):
        if self.length == 0:
            print "List is empty"
        else:
           temp = self.head
           current = self.head
           while current.get_next() != self.head:
               temp = current
               current = current.get_next()
           temp.set_next(current.get_next())


    def delete_first(self):
        if self.length == 0:
            print "List is empty"
        else:
            current = self.head
            nextcurrent = current.get_next()
            while current.get_next() != self.head:
                current = current.get_next()
                current.set_next(nextcurrent)
                self.head = nextcurrent










